# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")

end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do

  desc "Get certificates"
  lane :certificates do
    xcodes
    sync_code_signing(
      type: "development",
      app_identifier: ['com.keevault.keevault.dev', 'com.keevault.keevault.dev.autofill'],
      force_for_new_devices: true,
      readonly: true
    )

    sync_code_signing(
      type: "appstore",
      app_identifier: ['com.keevault.keevault', 'com.keevault.keevault.beta', 'com.keevault.keevault.autofill', 'com.keevault.keevault.beta.autofill'],
      readonly: true
    )

    sync_code_signing(
      type: "adhoc",
      app_identifier: ['com.keevault.keevault', 'com.keevault.keevault.beta', 'com.keevault.keevault.dev', 'com.keevault.keevault.autofill', 'com.keevault.keevault.beta.autofill', 'com.keevault.keevault.dev.autofill' ],
      readonly: true
    )
  end

  desc "Generate new certificates"
  lane :generate_new_certificates do
    xcodes
    sync_code_signing(
      type: "development",
      app_identifier: ['com.keevault.keevault.dev', 'com.keevault.keevault.dev.autofill'],
      force_for_new_devices: true,
      readonly: false
    )
    
    sync_code_signing(
      type: "appstore",
      app_identifier: ['com.keevault.keevault', 'com.keevault.keevault.beta', 'com.keevault.keevault.autofill', 'com.keevault.keevault.beta.autofill'],
      readonly: false
    )

    sync_code_signing(
      type: "adhoc",
      app_identifier: ['com.keevault.keevault', 'com.keevault.keevault.beta', 'com.keevault.keevault.dev', 'com.keevault.keevault.autofill', 'com.keevault.keevault.beta.autofill', 'com.keevault.keevault.dev.autofill' ],
      force_for_new_devices: true,
      readonly: false
    )
  end

  ### Warning!! Only thing that determines whether this points at beta or prod servers is 
  # the command most recently executed!
  desc "Push a new beta build to test service"
  lane :beta_stage do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD

    begin
      xcodes
      ensure_temp_keychain(keychain_name, keychain_password)

      match(
        type: "adhoc",
        app_identifier: ['com.keevault.keevault.beta', 'com.keevault.keevault.beta.autofill'],
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password 
      )
      update_project_provisioning(
        xcodeproj: "Runner.xcodeproj",
        profile: ENV['sigh_com.keevault.keevault.beta_adhoc_profile-path'],
        target_filter: ".*Runner.*",
        build_configuration: "Release"
      )
      update_project_provisioning(
        xcodeproj: "Runner.xcodeproj",
        profile: ENV['sigh_com.keevault.keevault.beta.autofill_adhoc_profile-path'],
        target_filter: ".*KeeVaultAutofill.*",
        build_configuration: "Release"
      )
      build_app(
        workspace: "Runner.xcworkspace",
        scheme: "Runner",
        configuration: 'Release',
        export_method: 'ad-hoc',
        export_options: {
          provisioningProfiles: { 
            'com.keevault.keevault.beta' => 'match AdHoc com.keevault.keevault.beta',
            'com.keevault.keevault.beta.autofill' => 'match AdHoc com.keevault.keevault.beta.autofill'
          }
        }
      )
      testfairy(api_key: ENV["TESTFAIRY_API_KEY"],
        testers_groups: ['ios'],
        notify: 'on'
      )
    ensure
      delete_temp_keychain(keychain_name)
    end
  end

  desc "Push a new prod build to testflight"
  lane :prod_stage_testflight do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD

    begin
      xcodes
      ensure_temp_keychain(keychain_name, keychain_password)

      match(
        type: "appstore",
        app_identifier: ['com.keevault.keevault', 'com.keevault.keevault.autofill'],
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password 
      )
      update_project_provisioning(
        xcodeproj: "Runner.xcodeproj",
        profile: ENV['sigh_com.keevault.keevault_appstore_profile-path'],
        target_filter: ".*Runner.*",
        build_configuration: "Release"
      )
      update_project_provisioning(
        xcodeproj: "Runner.xcodeproj",
        profile: ENV['sigh_com.keevault.keevault.autofill_appstore_profile-path'],
        target_filter: ".*KeeVaultAutofill.*",
        build_configuration: "Release"
      )
      build_app(
        workspace: "Runner.xcworkspace",
        scheme: "Runner",
        configuration: 'Release',
        export_method: 'app-store',
        export_options: {
          provisioningProfiles: { 
            'com.keevault.keevault' => 'match AppStore com.keevault.keevault',
            'com.keevault.keevault.autofill' => 'match AppStore com.keevault.keevault.autofill'
          }
        }
      )
      app_store_connect_api_key(
        is_key_content_base64: true,
        in_house: false,
      )
      upload_to_testflight(
        skip_submission: true #TODO: remove once tested process works
        )
    ensure
      delete_temp_keychain(keychain_name)
    end
  end
end
